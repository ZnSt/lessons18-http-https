{"id":"js/2-json_id.js","dependencies":[{"name":"/Users/privetsvuemlord/Documents/GitHub/Без названия/lessons18-http-https/package.json","includedInParent":true,"mtime":1621838968000}],"generated":{"js":"/*\r\n  Документация API: https://jsonplaceholder.typicode.com/\r\n\r\n  Написать функцию getUserById, которая по событию сабмит на форме посылает запрос на получение информации о пользоватеьте с id (число) введенным в input. \r\n \r\n  Объект, который придет в ответе, используйте для вывода информации о пользователе в элементе .result\r\n  \r\n  Если пользователя с таким идентификатором в базе данных нет, в элемент .error вывести строку `Ошибка! Пользователя с id \"${id}\" не существует`\r\n*/\n// const container = document.querySelector('#task-2');\n// const refs = {\n//   formRef: container.querySelector('.search-form'),\n//   resultRef: container.querySelector('.result'),\n//   errorRef: container.querySelector('.error'),\n// };\n// const markupSample = `\n// <table>\n//   <tbody>\n//     <tr>\n//       <th>User ID:  &emsp;</th>\n//       <td>2</td>\n//     </tr>\n//     <tr>\n//       <th>User name:  &emsp;</th>\n//       <td>Leanne Graham</td>\n//     </tr>\n//     <tr>\n//       <th>Company:  &emsp;</th>\n//       <td>Romaguera-Crona</td>\n//     </tr>\n//   </tbody>\n// </table>`;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"js/2-json_id.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"js/2-json_id.js","original":{"line":2,"column":0}},{"generated":{"line":3,"column":0},"source":"js/2-json_id.js","original":{"line":3,"column":0}},{"generated":{"line":4,"column":0},"source":"js/2-json_id.js","original":{"line":4,"column":0}},{"generated":{"line":5,"column":0},"source":"js/2-json_id.js","original":{"line":5,"column":0}},{"generated":{"line":6,"column":0},"source":"js/2-json_id.js","original":{"line":6,"column":0}},{"generated":{"line":7,"column":0},"source":"js/2-json_id.js","original":{"line":7,"column":0}},{"generated":{"line":8,"column":0},"source":"js/2-json_id.js","original":{"line":8,"column":0}},{"generated":{"line":9,"column":0},"source":"js/2-json_id.js","original":{"line":9,"column":0}},{"generated":{"line":10,"column":0},"source":"js/2-json_id.js","original":{"line":11,"column":0}},{"generated":{"line":11,"column":0},"source":"js/2-json_id.js","original":{"line":12,"column":0}},{"generated":{"line":12,"column":0},"source":"js/2-json_id.js","original":{"line":13,"column":0}},{"generated":{"line":13,"column":0},"source":"js/2-json_id.js","original":{"line":14,"column":0}},{"generated":{"line":14,"column":0},"source":"js/2-json_id.js","original":{"line":15,"column":0}},{"generated":{"line":15,"column":0},"source":"js/2-json_id.js","original":{"line":16,"column":0}},{"generated":{"line":16,"column":0},"source":"js/2-json_id.js","original":{"line":18,"column":0}},{"generated":{"line":17,"column":0},"source":"js/2-json_id.js","original":{"line":19,"column":0}},{"generated":{"line":18,"column":0},"source":"js/2-json_id.js","original":{"line":20,"column":0}},{"generated":{"line":19,"column":0},"source":"js/2-json_id.js","original":{"line":21,"column":0}},{"generated":{"line":20,"column":0},"source":"js/2-json_id.js","original":{"line":22,"column":0}},{"generated":{"line":21,"column":0},"source":"js/2-json_id.js","original":{"line":23,"column":0}},{"generated":{"line":22,"column":0},"source":"js/2-json_id.js","original":{"line":24,"column":0}},{"generated":{"line":23,"column":0},"source":"js/2-json_id.js","original":{"line":25,"column":0}},{"generated":{"line":24,"column":0},"source":"js/2-json_id.js","original":{"line":26,"column":0}},{"generated":{"line":25,"column":0},"source":"js/2-json_id.js","original":{"line":27,"column":0}},{"generated":{"line":26,"column":0},"source":"js/2-json_id.js","original":{"line":28,"column":0}},{"generated":{"line":27,"column":0},"source":"js/2-json_id.js","original":{"line":29,"column":0}},{"generated":{"line":28,"column":0},"source":"js/2-json_id.js","original":{"line":30,"column":0}},{"generated":{"line":29,"column":0},"source":"js/2-json_id.js","original":{"line":31,"column":0}},{"generated":{"line":30,"column":0},"source":"js/2-json_id.js","original":{"line":32,"column":0}},{"generated":{"line":31,"column":0},"source":"js/2-json_id.js","original":{"line":33,"column":0}},{"generated":{"line":32,"column":0},"source":"js/2-json_id.js","original":{"line":34,"column":0}}],"sources":{"js/2-json_id.js":"/*\r\n  Документация API: https://jsonplaceholder.typicode.com/\r\n\r\n  Написать функцию getUserById, которая по событию сабмит на форме посылает запрос на получение информации о пользоватеьте с id (число) введенным в input. \r\n \r\n  Объект, который придет в ответе, используйте для вывода информации о пользователе в элементе .result\r\n  \r\n  Если пользователя с таким идентификатором в базе данных нет, в элемент .error вывести строку `Ошибка! Пользователя с id \"${id}\" не существует`\r\n*/\r\n\r\n// const container = document.querySelector('#task-2');\r\n// const refs = {\r\n//   formRef: container.querySelector('.search-form'),\r\n//   resultRef: container.querySelector('.result'),\r\n//   errorRef: container.querySelector('.error'),\r\n// };\r\n\r\n// const markupSample = `\r\n// <table>\r\n//   <tbody>\r\n//     <tr>\r\n//       <th>User ID:  &emsp;</th>\r\n//       <td>2</td>\r\n//     </tr>\r\n//     <tr>\r\n//       <th>User name:  &emsp;</th>\r\n//       <td>Leanne Graham</td>\r\n//     </tr>\r\n//     <tr>\r\n//       <th>Company:  &emsp;</th>\r\n//       <td>Romaguera-Crona</td>\r\n//     </tr>\r\n//   </tbody>\r\n// </table>`;\r\n"},"lineCount":null}},"error":null,"hash":"f6ee4203e392cded0225d3370421ba58","cacheData":{"env":{}}}